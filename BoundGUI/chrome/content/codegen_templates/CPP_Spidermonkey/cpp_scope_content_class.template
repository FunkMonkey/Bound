{
"description":"",
	
"templateCode":
"
namespace {$namespaceName}
{
{if $childScopesContent}{$childScopesContent|indent:1:'\\t'}

{/if}	JSObject* prototype = NULL;

	//---------------------------------------------------
	// finalize
	//---------------------------------------------------
	void finalize(JSContext *cx, JSObject *obj)
	{
		{$fullName}* inst = static_cast<{$fullName}*>(JS_GetPrivate(cx, obj));
		if(inst != NULL)
			delete inst;
	}

	//---------------------------------------------------
	// JSClass
	//---------------------------------------------------
	JSClass jsClass = {
		\"{$newObjectName}\",  /* name */
		JSCLASS_HAS_PRIVATE,  /* flags */
		JS_PropertyStub, 
		JS_PropertyStub, 
		JS_PropertyStub, 
		JS_StrictPropertyStub,
		JS_EnumerateStub, 
		JS_ResolveStub, 
		JS_ConvertStub, 
		finalize
	};
	
{if $functionsWrapperCode}{$functionsWrapperCode|indent:1:'\\t'}
	
{/if}{if $instanceFunctionsDefineCode}	JSFunctionSpec instance_functions[] = {
{$instanceFunctionsDefineCode|indent:3:'\\t'}
			JS_FS_END
		};
	
{/if}{if $staticFunctionsDefineCode}	JSFunctionSpec static_functions[] = {
{$staticFunctionsDefineCode|indent:3:'\\t'}
			JS_FS_END
		};
	
{/if}

	//---------------------------------------------------
	// Constructor
	//---------------------------------------------------
	JSBool constructor(JSContext *cx, uintN argc, jsval *vp)
	{
		JSObject* obj = JS_NewObject(cx, &jsClass, prototype, NULL);
		if (!obj)
			return false;

		if(!JS_SetPrivate(cx, obj, new {$fullName}()))
		{
			// TODO: throw js-exception
		}

		JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(obj));

		return true;
	}

	JSBool init(JSContext* cx, JSObject* scope)
	{ 
		prototype = JS_InitClass(cx, scope, 

			// parent proto
			NULL, 

			&jsClass,

			// native constructor function and min arg count
			constructor, 0,

			// instance properties
			NULL, 

			// instance functions
			{if $instanceFunctionsDefineCode}instance_functions{else}NULL{/if},

			// static properties
			NULL, 

			// static functions
			{if $staticFunctionsDefineCode}static_functions{else}NULL{/if});
			
{if $initCalls}{$initCalls|indent:2:'\\t'}
{/if}
		return true;
	}
}",

"customFunctionsSource": {

	"namespaceName":	
		["data", "
			data.namespaceName = data.nameChain[data.nameChain.length-1];
		"],
		
	"childScopesContent":	
		["data", "
			var childScopesContent = '';
			for(var i = 0; i < data.childScopes.length; ++i)
				if(data.childScopes[i].isInline)
					childScopesContent += data.childScopes[i].cpp_scope_definition + '\\n\\n'
			data.childScopesContent = childScopesContent;
		"],
		
	"functionCode":	
		["data", "
			var functionsWrapperCode = ''; 
			var instanceFunctionsDefineCode = '';
			var staticFunctionsDefineCode = '';
			for(var i = 0; i < data.childFunctions.length; ++i)
			{
				var func = data.childFunctions[i];
				functionsWrapperCode += func.wrapper_function_code + '\\n\\n';
				
				var code = 'JS_FS(\"' + func.funcName + '\", ' + func.wrapper_function_name + ', ' + func.numParams + ', 0),\\n';
				
				if(func.isStatic == true)
					staticFunctionsDefineCode += code;
				else
					instanceFunctionsDefineCode += code;
			}
			data.functionsWrapperCode        = functionsWrapperCode;
			data.instanceFunctionsDefineCode = instanceFunctionsDefineCode;
			data.staticFunctionsDefineCode   = staticFunctionsDefineCode;
		"],

	"fullNamespace":	
		["data", "
			var fullNamespace = '::jswrap';
			for(var i = 0; i < data.nameChain.length; ++i)
				fullNamespace += '::' + data.nameChain[i];
			
			data.fullNamespace = fullNamespace;
		"],
	
	"defScope":	
		["data", "
			data.defScope = (data.newObjectName == null) ? 'scope' : 'newObj';
		"],
	
	"initCalls":	
		["data", "
			if(data.childScopes.length == 0)
				return;
				
			var initCalls = '';
			for(var i = 0; i < data.childScopes.length; ++i)
				initCalls += data.fullNamespace + '::' + data.childScopes[i].scopeName + '::init(cx, ' + data.defScope + ');\\n';
			
			data.initCalls = initCalls;
		"]
}

}