{$namespacesStart}

	JSObject* jsPrototype = NULL;
	JSObject* jsConstructor = NULL;

	//---------------------------------------------------
	// finalize
	//---------------------------------------------------
	void finalize(JSContext *cx, JSObject *obj)
	{
		{$cppClassFullName}* inst = static_cast<{$cppClassFullName}*>(JS_GetPrivate(cx, obj));
{if $typeLib.ownership == "Script"}		if(inst != NULL)
			delete inst;
{/if}	}

	//---------------------------------------------------
	// JSClass
	//---------------------------------------------------
	JSClass jsClass = {
		"{$newObjectName}",  /* name */
		JSCLASS_HAS_PRIVATE,  /* flags */
		JS_PropertyStub, 
		JS_PropertyStub, 
		JS_PropertyStub, 
		JS_StrictPropertyStub,
		JS_EnumerateStub, 
		JS_ResolveStub, 
		JS_ConvertStub, 
		finalize
	};
	
{if $functionsWrapperCode}{$functionsWrapperCode|indent:1:'\t'}
	
{/if}{if $instanceFunctionsDefineCode}	JSFunctionSpec instance_functions[] = {
{$instanceFunctionsDefineCode|indent:3:'\t'}
			JS_FS_END
		};
	
{/if}{if $staticFunctionsDefineCode}	JSFunctionSpec static_functions[] = {
{$staticFunctionsDefineCode|indent:3:'\t'}
			JS_FS_END
		};
	
{/if}

	//---------------------------------------------------
	// Constructor
	//---------------------------------------------------
	JSBool constructor(JSContext *cx, uintN argc, jsval *vp)
	{
		JSWRAP_TRY_START
{if $typeLib.allowConstruction}			JSObject* obj = JS_NewObject(cx, &jsClass, jsPrototype, NULL);
			if (!obj)
				return false;

			if(!JS_SetPrivate(cx, obj, new {$cppClassFullName}()))
				throw exception("Could not set private data");
				
			JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(obj));
{else}			throw exception("Cannot construct instances of {$newObjectName}");
{/if}		JSWRAP_CATCH_AND_REPORT_JS_ERROR(cx, "{$newObjectName}")

		return true;
	}

	JSBool init(JSContext* cx, JSObject* scope)
	{ 
		jsPrototype = JS_InitClass(cx, scope, 

			// parent proto
			{if $baseTypeLib}{$baseTypeLib.jsPrototype}{else}NULL{/if}, 

			&jsClass,

			// native constructor function and min arg count
			constructor, 0,

			// instance properties
			NULL, 

			// instance functions
			{if $instanceFunctionsDefineCode}instance_functions{else}NULL{/if},

			// static properties
			NULL, 

			// static functions
			{if $staticFunctionsDefineCode}static_functions{else}NULL{/if});
			
		jsConstructor = JS_GetConstructor(cx, jsPrototype);
			
{if $initCalls}{$initCalls|indent:2:'\t'}
{/if}
		return true;
	}
	
{if $typeLib.allowWrappingInstances}	JSObject* wrapInstance(JSContext* cx, const {$cppClassFullName}* ptr)
	{
		{if !$typeLib.allowNullValues}if(!ptr)
			throw exception("{$cppClassFullName}: wrapper does not support null values");

		{/if}return jswrap::wrapPtr(cx, ptr, &jsClass, jsPrototype);
	}

{/if}{if $typeLib.allowWrappingCopies}	JSObject* wrapCopy(JSContext* cx, const {$cppClassFullName}& ref)
	{
		return jswrap::wrapCopy(cx, ref, &jsClass, jsPrototype);
	}

{/if}{if $typeLib.allowUnwrapping}	{$cppClassFullName}* getFromJSValue(JSContext* cx, jsval val)
	{
		return getPrivateAsPtr<{$cppClassFullName}>(cx, val, jsConstructor);
	}
{/if}
	
{$namespacesEnd}