{$namespacesStart}

	JSObject* prototype = NULL;

	//---------------------------------------------------
	// finalize
	//---------------------------------------------------
	void finalize(JSContext *cx, JSObject *obj)
	{
		{$cppClassFullName}* inst = static_cast<{$cppClassFullName}*>(JS_GetPrivate(cx, obj));
		if(inst != NULL)
			delete inst;
	}

	//---------------------------------------------------
	// JSClass
	//---------------------------------------------------
	JSClass jsClass = {
		"{$newObjectName}",  /* name */
		JSCLASS_HAS_PRIVATE,  /* flags */
		JS_PropertyStub, 
		JS_PropertyStub, 
		JS_PropertyStub, 
		JS_StrictPropertyStub,
		JS_EnumerateStub, 
		JS_ResolveStub, 
		JS_ConvertStub, 
		finalize
	};
	
{if $functionsWrapperCode}{$functionsWrapperCode|indent:1:'\t'}
	
{/if}{if $instanceFunctionsDefineCode}	JSFunctionSpec instance_functions[] = {
{$instanceFunctionsDefineCode|indent:3:'\t'}
			JS_FS_END
		};
	
{/if}{if $staticFunctionsDefineCode}	JSFunctionSpec static_functions[] = {
{$staticFunctionsDefineCode|indent:3:'\t'}
			JS_FS_END
		};
	
{/if}

	//---------------------------------------------------
	// Constructor
	//---------------------------------------------------
	JSBool constructor(JSContext *cx, uintN argc, jsval *vp)
	{
		JSObject* obj = JS_NewObject(cx, &jsClass, prototype, NULL);
		if (!obj)
			return false;

		if(!JS_SetPrivate(cx, obj, new {$cppClassFullName}()))
		{
			// TODO: throw js-exception
		}

		JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(obj));

		return true;
	}

	JSBool init(JSContext* cx, JSObject* scope)
	{ 
		prototype = JS_InitClass(cx, scope, 

			// parent proto
			NULL, 

			&jsClass,

			// native constructor function and min arg count
			constructor, 0,

			// instance properties
			NULL, 

			// instance functions
			{if $instanceFunctionsDefineCode}instance_functions{else}NULL{/if},

			// static properties
			NULL, 

			// static functions
			{if $staticFunctionsDefineCode}static_functions{else}NULL{/if});
			
{if $initCalls}{$initCalls|indent:2:'\t'}
{/if}
		return true;
	}
	
{$namespacesEnd}